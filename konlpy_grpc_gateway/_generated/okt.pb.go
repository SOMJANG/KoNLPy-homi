// Code generated by protoc-gen-go. DO NOT EDIT.
// source: okt.proto

package konlpy_v0alpha

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("okt.proto", fileDescriptor_8ff86591b4225c12) }

var fileDescriptor_8ff86591b4225c12 = []byte{
	// 175 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcc, 0xcf, 0x2e, 0xd1,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0xcb, 0xce, 0xcf, 0xcb, 0x29, 0xa8, 0xd4, 0x2b, 0x33,
	0x48, 0xcc, 0x29, 0xc8, 0x48, 0x94, 0xe2, 0x49, 0xcf, 0xc9, 0x4f, 0x4a, 0xcc, 0x81, 0xc8, 0x1a,
	0x75, 0x31, 0x73, 0x31, 0xfb, 0x67, 0x97, 0x08, 0x79, 0x70, 0x31, 0x07, 0xe4, 0x17, 0x0b, 0xc9,
	0xea, 0xa1, 0xaa, 0xd6, 0x0b, 0x2e, 0x29, 0xca, 0xcc, 0x4b, 0x0f, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d,
	0x2e, 0x91, 0x52, 0x42, 0x97, 0x0e, 0x29, 0x2d, 0xc8, 0x49, 0x75, 0x2c, 0x2a, 0x4a, 0xac, 0x0c,
	0x4a, 0x2d, 0x2e, 0xc8, 0xcf, 0x2b, 0x4e, 0x15, 0xf2, 0xe6, 0x62, 0xf5, 0xcb, 0x2f, 0xcd, 0x23,
	0x68, 0x96, 0x32, 0x76, 0x69, 0x54, 0xc3, 0x7c, 0xb8, 0xd8, 0x7c, 0xf3, 0x8b, 0x0a, 0x32, 0xa8,
	0x63, 0x9a, 0x2f, 0x17, 0x7b, 0x40, 0x46, 0x51, 0x62, 0x71, 0x2a, 0x75, 0x8c, 0xf3, 0xe7, 0xe2,
	0xf4, 0xcb, 0x2f, 0xca, 0x4d, 0xcc, 0xc9, 0xac, 0x4a, 0xa5, 0x86, 0x81, 0x49, 0x6c, 0xe0, 0x38,
	0x31, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xd2, 0x2e, 0xe8, 0x22, 0xbe, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// OktClient is the client API for Okt service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OktClient interface {
	Pos(ctx context.Context, in *StringRequest, opts ...grpc.CallOption) (*TupleArrayResponse, error)
	Nouns(ctx context.Context, in *StringRequest, opts ...grpc.CallOption) (*StringArrayResponse, error)
	Morphs(ctx context.Context, in *StringRequest, opts ...grpc.CallOption) (*StringArrayResponse, error)
	Phrases(ctx context.Context, in *StringRequest, opts ...grpc.CallOption) (*StringArrayResponse, error)
	Normalize(ctx context.Context, in *StringRequest, opts ...grpc.CallOption) (*StringArrayResponse, error)
}

type oktClient struct {
	cc *grpc.ClientConn
}

func NewOktClient(cc *grpc.ClientConn) OktClient {
	return &oktClient{cc}
}

func (c *oktClient) Pos(ctx context.Context, in *StringRequest, opts ...grpc.CallOption) (*TupleArrayResponse, error) {
	out := new(TupleArrayResponse)
	err := c.cc.Invoke(ctx, "/konlpy.v0alpha.Okt/Pos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oktClient) Nouns(ctx context.Context, in *StringRequest, opts ...grpc.CallOption) (*StringArrayResponse, error) {
	out := new(StringArrayResponse)
	err := c.cc.Invoke(ctx, "/konlpy.v0alpha.Okt/Nouns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oktClient) Morphs(ctx context.Context, in *StringRequest, opts ...grpc.CallOption) (*StringArrayResponse, error) {
	out := new(StringArrayResponse)
	err := c.cc.Invoke(ctx, "/konlpy.v0alpha.Okt/Morphs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oktClient) Phrases(ctx context.Context, in *StringRequest, opts ...grpc.CallOption) (*StringArrayResponse, error) {
	out := new(StringArrayResponse)
	err := c.cc.Invoke(ctx, "/konlpy.v0alpha.Okt/Phrases", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oktClient) Normalize(ctx context.Context, in *StringRequest, opts ...grpc.CallOption) (*StringArrayResponse, error) {
	out := new(StringArrayResponse)
	err := c.cc.Invoke(ctx, "/konlpy.v0alpha.Okt/Normalize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OktServer is the server API for Okt service.
type OktServer interface {
	Pos(context.Context, *StringRequest) (*TupleArrayResponse, error)
	Nouns(context.Context, *StringRequest) (*StringArrayResponse, error)
	Morphs(context.Context, *StringRequest) (*StringArrayResponse, error)
	Phrases(context.Context, *StringRequest) (*StringArrayResponse, error)
	Normalize(context.Context, *StringRequest) (*StringArrayResponse, error)
}

// UnimplementedOktServer can be embedded to have forward compatible implementations.
type UnimplementedOktServer struct {
}

func (*UnimplementedOktServer) Pos(ctx context.Context, req *StringRequest) (*TupleArrayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pos not implemented")
}
func (*UnimplementedOktServer) Nouns(ctx context.Context, req *StringRequest) (*StringArrayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Nouns not implemented")
}
func (*UnimplementedOktServer) Morphs(ctx context.Context, req *StringRequest) (*StringArrayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Morphs not implemented")
}
func (*UnimplementedOktServer) Phrases(ctx context.Context, req *StringRequest) (*StringArrayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Phrases not implemented")
}
func (*UnimplementedOktServer) Normalize(ctx context.Context, req *StringRequest) (*StringArrayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Normalize not implemented")
}

func RegisterOktServer(s *grpc.Server, srv OktServer) {
	s.RegisterService(&_Okt_serviceDesc, srv)
}

func _Okt_Pos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OktServer).Pos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/konlpy.v0alpha.Okt/Pos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OktServer).Pos(ctx, req.(*StringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Okt_Nouns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OktServer).Nouns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/konlpy.v0alpha.Okt/Nouns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OktServer).Nouns(ctx, req.(*StringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Okt_Morphs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OktServer).Morphs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/konlpy.v0alpha.Okt/Morphs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OktServer).Morphs(ctx, req.(*StringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Okt_Phrases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OktServer).Phrases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/konlpy.v0alpha.Okt/Phrases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OktServer).Phrases(ctx, req.(*StringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Okt_Normalize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OktServer).Normalize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/konlpy.v0alpha.Okt/Normalize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OktServer).Normalize(ctx, req.(*StringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Okt_serviceDesc = grpc.ServiceDesc{
	ServiceName: "konlpy.v0alpha.Okt",
	HandlerType: (*OktServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Pos",
			Handler:    _Okt_Pos_Handler,
		},
		{
			MethodName: "Nouns",
			Handler:    _Okt_Nouns_Handler,
		},
		{
			MethodName: "Morphs",
			Handler:    _Okt_Morphs_Handler,
		},
		{
			MethodName: "Phrases",
			Handler:    _Okt_Phrases_Handler,
		},
		{
			MethodName: "Normalize",
			Handler:    _Okt_Normalize_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "okt.proto",
}
