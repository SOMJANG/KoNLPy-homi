// Code generated by protoc-gen-go. DO NOT EDIT.
// source: hannanum.proto

package konlpy_v0alpha

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("hannanum.proto", fileDescriptor_89312b7f94adfaae) }

var fileDescriptor_89312b7f94adfaae = []byte{
	// 175 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcb, 0x48, 0xcc, 0xcb,
	0x4b, 0xcc, 0x2b, 0xcd, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0xcb, 0xce, 0xcf, 0xcb,
	0x29, 0xa8, 0xd4, 0x2b, 0x33, 0x48, 0xcc, 0x29, 0xc8, 0x48, 0x94, 0xe2, 0x49, 0xcf, 0xc9, 0x4f,
	0x4a, 0xcc, 0x81, 0xc8, 0x1a, 0xf5, 0x30, 0x73, 0x71, 0x78, 0x40, 0x35, 0x08, 0x79, 0x71, 0xb1,
	0x06, 0xe4, 0x17, 0x1b, 0x58, 0x0a, 0xc9, 0xea, 0xa1, 0x6a, 0xd2, 0x0b, 0x2e, 0x29, 0xca, 0xcc,
	0x4b, 0x0f, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x91, 0x52, 0x42, 0x97, 0x0e, 0x29, 0x2d, 0xc8,
	0x49, 0x75, 0x2c, 0x2a, 0x4a, 0xac, 0x0c, 0x4a, 0x2d, 0x2e, 0xc8, 0xcf, 0x2b, 0x4e, 0x85, 0x9a,
	0x65, 0x64, 0x44, 0x0d, 0xb3, 0xbc, 0xb9, 0x58, 0xfd, 0xf2, 0x4b, 0xf3, 0x8a, 0x09, 0x99, 0xa5,
	0x8c, 0x5d, 0x1a, 0xd5, 0x30, 0x1f, 0x2e, 0x36, 0xdf, 0xfc, 0xa2, 0x82, 0x0c, 0xea, 0x98, 0xe6,
	0xcb, 0xc5, 0xee, 0x98, 0x97, 0x98, 0x53, 0x59, 0x95, 0x4a, 0x0d, 0xe3, 0x92, 0xd8, 0xc0, 0xb1,
	0x62, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x40, 0x20, 0x04, 0x8a, 0xc5, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HannanumClient is the client API for Hannanum service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HannanumClient interface {
	Pos09(ctx context.Context, in *StringRequest, opts ...grpc.CallOption) (*TupleArrayResponse, error)
	Pos22(ctx context.Context, in *StringRequest, opts ...grpc.CallOption) (*TupleArrayResponse, error)
	Nouns(ctx context.Context, in *StringRequest, opts ...grpc.CallOption) (*StringArrayResponse, error)
	Morphs(ctx context.Context, in *StringRequest, opts ...grpc.CallOption) (*StringArrayResponse, error)
	Analyze(ctx context.Context, in *StringRequest, opts ...grpc.CallOption) (*StringArrayResponse, error)
}

type hannanumClient struct {
	cc *grpc.ClientConn
}

func NewHannanumClient(cc *grpc.ClientConn) HannanumClient {
	return &hannanumClient{cc}
}

func (c *hannanumClient) Pos09(ctx context.Context, in *StringRequest, opts ...grpc.CallOption) (*TupleArrayResponse, error) {
	out := new(TupleArrayResponse)
	err := c.cc.Invoke(ctx, "/konlpy.v0alpha.Hannanum/Pos09", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hannanumClient) Pos22(ctx context.Context, in *StringRequest, opts ...grpc.CallOption) (*TupleArrayResponse, error) {
	out := new(TupleArrayResponse)
	err := c.cc.Invoke(ctx, "/konlpy.v0alpha.Hannanum/Pos22", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hannanumClient) Nouns(ctx context.Context, in *StringRequest, opts ...grpc.CallOption) (*StringArrayResponse, error) {
	out := new(StringArrayResponse)
	err := c.cc.Invoke(ctx, "/konlpy.v0alpha.Hannanum/Nouns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hannanumClient) Morphs(ctx context.Context, in *StringRequest, opts ...grpc.CallOption) (*StringArrayResponse, error) {
	out := new(StringArrayResponse)
	err := c.cc.Invoke(ctx, "/konlpy.v0alpha.Hannanum/Morphs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hannanumClient) Analyze(ctx context.Context, in *StringRequest, opts ...grpc.CallOption) (*StringArrayResponse, error) {
	out := new(StringArrayResponse)
	err := c.cc.Invoke(ctx, "/konlpy.v0alpha.Hannanum/Analyze", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HannanumServer is the server API for Hannanum service.
type HannanumServer interface {
	Pos09(context.Context, *StringRequest) (*TupleArrayResponse, error)
	Pos22(context.Context, *StringRequest) (*TupleArrayResponse, error)
	Nouns(context.Context, *StringRequest) (*StringArrayResponse, error)
	Morphs(context.Context, *StringRequest) (*StringArrayResponse, error)
	Analyze(context.Context, *StringRequest) (*StringArrayResponse, error)
}

// UnimplementedHannanumServer can be embedded to have forward compatible implementations.
type UnimplementedHannanumServer struct {
}

func (*UnimplementedHannanumServer) Pos09(ctx context.Context, req *StringRequest) (*TupleArrayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pos09 not implemented")
}
func (*UnimplementedHannanumServer) Pos22(ctx context.Context, req *StringRequest) (*TupleArrayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pos22 not implemented")
}
func (*UnimplementedHannanumServer) Nouns(ctx context.Context, req *StringRequest) (*StringArrayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Nouns not implemented")
}
func (*UnimplementedHannanumServer) Morphs(ctx context.Context, req *StringRequest) (*StringArrayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Morphs not implemented")
}
func (*UnimplementedHannanumServer) Analyze(ctx context.Context, req *StringRequest) (*StringArrayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Analyze not implemented")
}

func RegisterHannanumServer(s *grpc.Server, srv HannanumServer) {
	s.RegisterService(&_Hannanum_serviceDesc, srv)
}

func _Hannanum_Pos09_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HannanumServer).Pos09(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/konlpy.v0alpha.Hannanum/Pos09",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HannanumServer).Pos09(ctx, req.(*StringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hannanum_Pos22_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HannanumServer).Pos22(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/konlpy.v0alpha.Hannanum/Pos22",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HannanumServer).Pos22(ctx, req.(*StringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hannanum_Nouns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HannanumServer).Nouns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/konlpy.v0alpha.Hannanum/Nouns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HannanumServer).Nouns(ctx, req.(*StringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hannanum_Morphs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HannanumServer).Morphs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/konlpy.v0alpha.Hannanum/Morphs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HannanumServer).Morphs(ctx, req.(*StringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hannanum_Analyze_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HannanumServer).Analyze(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/konlpy.v0alpha.Hannanum/Analyze",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HannanumServer).Analyze(ctx, req.(*StringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Hannanum_serviceDesc = grpc.ServiceDesc{
	ServiceName: "konlpy.v0alpha.Hannanum",
	HandlerType: (*HannanumServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Pos09",
			Handler:    _Hannanum_Pos09_Handler,
		},
		{
			MethodName: "Pos22",
			Handler:    _Hannanum_Pos22_Handler,
		},
		{
			MethodName: "Nouns",
			Handler:    _Hannanum_Nouns_Handler,
		},
		{
			MethodName: "Morphs",
			Handler:    _Hannanum_Morphs_Handler,
		},
		{
			MethodName: "Analyze",
			Handler:    _Hannanum_Analyze_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hannanum.proto",
}
